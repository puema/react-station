{"version":3,"sources":["lib/index.tsx","pages/async-calls/AsyncCalls.tsx","pages/color-tree/Node.tsx","pages/color-tree/createState.ts","pages/color-tree/ColorTree.tsx","pages/mount-unmount/MountUnmount.tsx","components/Header.tsx","components/App.tsx","index.tsx"],"names":["createStore","initialState","initialActions","actions","state","listeners","getState","getActions","setState","update","a","async","merge","forEach","listener","useStore","select","s","useState","forceUpdate","lastSelected","useRef","useEffect","selected","current","push","splice","findIndex","l","bindActions","this","store","unboundActions","Object","keys","reduce","boundActions","key","args","loading","count","add","value","load","Promise","resolve","setTimeout","AsyncCalls","StyledAsyncCalls","onClick","styled","div","Node","memo","id","className","node","findNode","children","result","fn","color","setColor","Container","generateRandomColor","event","stopPropagation","map","child","random","Math","root","parent","foundRightChildren","some","i","createNodes","depth","Array","fill","undefined","_","index","ColorTree","StyledNode","items","length","remove","slice","MountUnmount","Center","Stretch","Button","Items","item","Subscriber","StyledSubscriber","button","Header","StyledHeader","to","header","StyledApp","GlobalStyles","createGlobalStyle","Content","ReactDOM","render","basename","path","exact","component","document","getElementById"],"mappings":"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","file":"static/js/main.2a87d0c9.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport interface Store<S, A extends ActionMap<S>> {\n  getState(): S;\n  getActions(): BoundActionMap<A>;\n  setState(state: Partial<S> | Promise<Partial<S>>): void | Promise<void>;\n  useStore(select?: (s: S) => any): { state: S; actions: BoundActionMap<A> };\n}\n\nexport function createStore<S, A extends ActionMap<S>>(\n  initialState: S,\n  initialActions: A | ((store: Store<S, A>) => A)\n) {\n  let state = initialState;\n  let actions: BoundActionMap<A>;\n  const listeners: (() => void)[] = [];\n\n  async function setState(update: Partial<S> | Promise<Partial<S>>) {\n    const merge = await update;\n    state = { ...state, ...merge };\n    listeners.forEach(listener => listener());\n  }\n\n  return {\n    getState() {\n      return state;\n    },\n\n    getActions() {\n      return actions;\n    },\n\n    setState,\n\n    useStore(select: (s: S) => unknown = s => s) {\n      const [, forceUpdate] = useState();\n      const lastSelected = useRef(select(state));\n      useEffect(() => {\n        const listener = () => {\n          const selected = select(state);\n          if (selected !== lastSelected.current) {\n            forceUpdate({});\n            lastSelected.current = selected;\n          }\n        };\n        listeners.push(listener);\n        return () => {\n          listeners.splice(\n            listeners.findIndex(l => l === listener),\n            1\n          );\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, []);\n      actions = bindActions(this, initialActions);\n      return { state, actions };\n    },\n  };\n}\n\nexport function useStore<S, A extends ActionMap<S>>(store: Store<S, A>, select?: (s: S) => any) {\n  return store.useStore(select);\n}\n\nfunction bindActions<A extends ActionMap<S>, S>(\n  store: Store<S, A>,\n  unboundActions: A | ((store: Store<S, A>) => A)\n) {\n  const { getState, setState } = store;\n  const actions = typeof unboundActions === 'function' ? unboundActions(store) : unboundActions;\n\n  return Object.keys(actions).reduce((boundActions, key) => {\n    (boundActions[key] as any) = (...args: any[]) => setState(actions[key](getState(), ...args));\n    return boundActions;\n  }, {} as BoundActionMap<A>);\n}\n\ntype Action<S> = (state: S, ...props: any[]) => Partial<S> | Promise<Partial<S>>;\ntype ActionMap<S> = { [key: string]: Action<S> };\ntype BoundAction<A> = A extends (state: any, ...args: infer P) => any\n  ? (...args: P) => void\n  : never;\ntype BoundActionMap<A> = {\n  [K in keyof A]: BoundAction<A[K]>;\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { createStore, Store, useStore } from '../../lib';\n\nconst initialState = {\n  loading: false,\n  count: 0,\n};\n\ntype State = typeof initialState;\n\ntype Actions = {\n  add(state: State, value: number): Promise<State>;\n  load(state: State): Partial<State>;\n};\n\nconst actions = ({ getActions }: Store<State, Actions>) => ({\n  async add(state: State, value: number): Promise<State> {\n    getActions().load();\n    await expensive();\n    return {\n      count: state.count + value,\n      loading: false,\n    };\n  },\n\n  load() {\n    return { loading: true };\n  },\n});\n\nconst store = createStore(initialState, actions);\n\nexport function AsyncCalls() {\n  const { state, actions } = useStore(store);\n  const { count, loading } = state;\n  const { add } = actions;\n\n  return (\n    <StyledAsyncCalls>\n      <button onClick={() => add(1)}>Very expensive calculation</button>\n      <span>{loading ? `Calculating ${count} + 1...` : `Value: ${count}`}</span>\n    </StyledAsyncCalls>\n  );\n}\n\nasync function expensive() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, 1000);\n  });\n}\n\nconst StyledAsyncCalls = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { findNode } from './createState';\nimport { useStore } from '../../lib';\nimport { store } from './ColorTree';\n\nexport const Node = memo(({ id, className }: { id: string; className?: string }) => {\n  const { state, actions } = useStore(store);\n\n  const node = findNode(state, id);\n  if (!node) return null;\n\n  const { key, value, children } = node;\n  const { color } = value;\n  const { setColor } = actions;\n\n  const changeColor = () => {\n    setColor({ key, color: generateRandomColor() });\n  };\n\n  return (\n    <Container className={className} color={color} onClick={stopPropagation(changeColor)}>\n      {children.map((child: any) => (\n        <Node key={child.key} id={child.key} />\n      ))}\n    </Container>\n  );\n});\n\nfunction stopPropagation<F extends Function>(fn?: F) {\n  return (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n    if (fn) fn(event);\n  };\n}\n\nfunction generateRandomColor() {\n  const random = () => Math.random() * 255;\n  return `rgba(${random()}, ${random()}, ${random()}, 0.2)`;\n}\n\nconst Container = styled.div`\n  display: grid;\n  box-sizing: border-box;\n  grid-template-columns: repeat(2, auto);\n  margin: 0.5vh 0.5vw;\n  min-width: 4px;\n  min-height: 4px;\n  background-color: ${({ color }) => color};\n`;\n","import { MyNode, Node as NodeType } from './types';\n\nexport const maxDepth = 5;\n\nexport const createNodes = (depth: number = 0, key: string = '0'): MyNode => {\n  const node: MyNode = {\n    key,\n    value: {\n      color: `rgba(255, 255, 255, 0.1)`,\n      count: 0,\n    },\n    children: [],\n  };\n\n  if (depth < maxDepth) {\n    node.children = new Array(4)\n      .fill(undefined)\n      .map((_, index) => createNodes(depth + 1, `${key}-${index}`));\n  }\n\n  return node;\n};\n\nexport function updateNode<T>(ancestor: NodeType<T>, key: string, value: Partial<T>): NodeType<T> {\n  if (ancestor.key === key) {\n    return {\n      key,\n      children: ancestor.children,\n      value: { ...ancestor.value, ...value },\n    };\n  }\n\n  for (let i = 0; i < ancestor.children.length; i++) {\n    ancestor.children[i] = updateNode(ancestor.children[i], key, value);\n  }\n\n  return ancestor;\n}\n\nexport function findNode<T>(node: NodeType<T>, key: string): NodeType<T> | undefined {\n  if (node.key === key) {\n    return node;\n  }\n  for (let child of node.children) {\n    const result = findNode(child, key);\n    if (result) return result;\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { createStore } from '../../lib';\nimport { createNodes } from './createState';\nimport { Node } from './Node';\nimport { MyNode } from './types';\n\nconst actions = {\n  setColor(state: MyNode, { key, color }: { key: string; color: string }) {\n    return setColor(state, state, key, color);\n  },\n};\n\nexport const store = createStore(createNodes(), actions);\n\nexport const ColorTree = () => {\n  return <StyledNode id=\"0\" />;\n};\n\nexport function setColor(root: MyNode, parent: MyNode, key: string, color: string): MyNode {\n  if (root.key === key) {\n    root.value.color = color;\n    return { ...root };\n  }\n\n  let foundRightChildren = false;\n\n  if (parent.children.some(child => child.key === key)) {\n    foundRightChildren = true;\n  }\n\n  parent.children.forEach((child, i) => {\n    if (foundRightChildren) {\n      child.value.color = color;\n      parent.children[i] = { ...child };\n    } else {\n      setColor(root, parent.children[i], key, color);\n    }\n  });\n\n  return root;\n}\n\nconst StyledNode = styled(Node)`\n  height: 100%;\n  margin: 0;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { createStore, useStore } from '../../lib';\n\nconst initialState = {\n  items: [0, 1, 2],\n};\n\ntype State = typeof initialState;\n\nconst actions = {\n  add: ({ items }: State) => ({ items: [...items, items.length] }),\n  remove: ({ items }: State) => ({ items: items.slice(0, items.length - 1) }),\n};\n\nconst store = createStore(initialState, actions);\n\nexport const MountUnmount = () => {\n  const { state, actions } = useStore(store);\n  const { items } = state;\n  const { add, remove } = actions;\n\n  return (\n    <Center>\n      <Stretch>\n        <div>\n          <Button onClick={add}>Add</Button>\n          <Button onClick={remove}>Remove</Button>\n        </div>\n        <Items>\n          {items.map(item => (\n            <Subscriber key={item} />\n          ))}\n        </Items>\n      </Stretch>\n    </Center>\n  );\n};\n\nexport const Subscriber = () => {\n  const { state } = useStore(store);\n  const { items } = state;\n\n  return <StyledSubscriber>{items.length}</StyledSubscriber>;\n};\n\nconst Center = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Stretch = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Button = styled.button`\n  min-width: 128px;\n`;\n\nconst Items = styled.div`\n  width: 100%;\n`;\n\nconst StyledSubscriber = styled.div`\n  box-sizing: border-box;\n  background-color: #3c3f41;\n  border-radius: 8px;\n  padding: 4px 16px;\n  margin: 16px;\n  display: flex;\n  justify-content: center;\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport function Header() {\n  return (\n    <StyledHeader>\n      <Link to=\"/\">Update</Link>\n      <Link to=\"async-calls\">Async Calls</Link>\n      <Link to=\"mount-unmount\">Mount/Unmount</Link>\n    </StyledHeader>\n  );\n}\n\nconst StyledHeader = styled.header`\n  height: 64px;\n  flex-shrink: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-bottom: 1px solid grey;\n\n  & > * {\n    margin: 0 16px;\n  }\n`;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { AsyncCalls } from '../pages/async-calls/AsyncCalls';\nimport { ColorTree } from '../pages/color-tree/ColorTree';\nimport { MountUnmount } from '../pages/mount-unmount/MountUnmount';\nimport { Header } from './Header';\n\nexport const App = () => {\n  return (\n    <Router basename=\"/\">\n      <StyledApp>\n        <GlobalStyles />\n        <Header />\n        <Content>\n          <Switch>\n            <Route path=\"/\" exact component={ColorTree} />\n            <Route path=\"/async-calls\" component={AsyncCalls} />\n            <Route path=\"/mount-unmount\" component={MountUnmount} />\n          </Switch>\n        </Content>\n      </StyledApp>\n    </Router>\n  );\n};\n\nconst StyledApp = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: 'Open Sans', sans-serif;\n    background-color: #2b2b2b;\n    color: #fff;\n    a {\n      text-decoration: none;\n      color: inherit;      \n    }\n    button {\n      border: none;\n      outline: none;\n      margin: 16px;\n      padding: 8px 16px;\n      font-size: 14px;\n      color: #a9b7c6;\n      font-weight: bolder;\n      background-color: #3c3f41;\n      border-radius: 999px;\n      cursor: pointer;\n    }\n  }\n`;\n\nconst Content = styled.div`\n  flex-grow: 1;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}